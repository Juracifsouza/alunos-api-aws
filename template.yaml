AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  alunos-api-aws

  Sample SAM Template for alunos-api-aws

Globals:
  Function:
    Timeout: 15
    MemorySize: 128
    LoggingConfig:
      LogFormat: JSON

Resources:
  BucketUploadImageEcommerce:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::AccountId}-${AWS::Region}-upload-image-ecommerce"

  CreatePresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: presignedUrl/
      Handler: app.lambda_handler
      Runtime: python3.13
      Timeout: 3
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET_NAME: !Ref BucketUploadImageEcommerce
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref BucketUploadImageEcommerce
      Events:
        ApiEcommerce:
          Type: Api
          Properties:
            Path: /presigned-url
            Method: get

  CategorizeImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: categorize/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          SQS_URL: !Ref DetectLabelQueue
      Policies:
        - RekognitionDetectOnlyPolicy: {}
        - S3CrudPolicy:
            BucketName: !Ref BucketUploadImageEcommerce
        - SQSSendMessagePolicy:
            QueueName: !GetAtt DetectLabelQueue.QueueName

  DetectLabelQueue:
    Type: AWS::SQS::Queue

  ContentDeliveryNotificationTopic:
    Type: AWS::SNS::Topic

  GenerateContentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: generateContent/
      Handler: app.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          MODEL_ID: us.anthropic.claude-3-haiku-20240307-v1:0
          PROMPT_TITLE: "Considere ser um especialista em marketing e copywrite, escreva um titulo chamativo para meu proeduto com base nas etiqutas que irei disponibilizar logo mais. O resultado precisa ser somente o titulo. Deixe claro o que é o produto em seu titulo. Etiquetas: "
          PROMPT_DESCRIPTION: "Analise a imagem e gere um titulo com base nas labels(etiquetas) que você vai receber e gere uma descrição dos beneficios e qualidades do produto,seja especifico sobre o produto e chamativo, você vai precisar assumir o papel de especialista de marketing digital e direitos autorais, essa descrição precisa ser em português pt br"
          TABLE_NAME: !Ref BedrockMetadataImagesS3Table
          SNS_TOPIC_ARN: !Ref ContentDeliveryNotificationTopic
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: "*"
        - SQSPollerPolicy:
            QueueName: !GetAtt DetectLabelQueue.QueueName
        - DynamoDBCrudPolicy:
            TableName: !Ref BedrockMetadataImagesS3Table
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt ContentDeliveryNotificationTopic.TopicName
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DetectLabelQueue.Arn

  # Definição da tabela DynamoDB
  BedrockMetadataImagesS3Table:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Definição da função Lambda
  GetAllProductsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getAllProducts/
      Handler: getAllProducts.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref BedrockMetadataImagesS3Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BedrockMetadataImagesS3Table
      Events:
        ApiEcommerce:
          Type: Api
          Properties:
            Path: /products
            Method: get
      Timeout: 30

  # Definição da função Lambda
  GetProductByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: getProductById/
      Handler: getProductById.lambda_handler
      Runtime: python3.13
      Architectures:
        - x86_64
      Environment:
        Variables:
          TABLE_NAME: !Ref BedrockMetadataImagesS3Table
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BedrockMetadataImagesS3Table
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /productid/{id}
            Method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:us-east-2:075155269134:table/BedrockMetadataImagesS3Table

  # Definição da função Lambda
  SendEmailNotificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sendEmailNotification.sendEmailNotification.lambda_handler
      Runtime: python3.13
      Timeout: 30
      Environment:
        Variables:
          TABLE_NAME: !Ref BedrockMetadataImagesS3Table
          SENDER_EMAIL: "juracifsouza02@gmail.com"
      Policies:
        - SESCrudPolicy:
            IdentityName: !Ref SenderIdentity
        - Statement:  # Adicionar política explícita
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: "*"
        - DynamoDBCrudPolicy:
            TableName: !Ref BedrockMetadataImagesS3Table
        - Statement:
            - Effect: Allow
              Action:
                - sns:Receive
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
              Resource: "*"
      Events:
        SNSTrigger:
          Type: SNS
          Properties:
            Topic: !Ref NotificationTopic        # Opção 2: Trigger via SQS (descomente se preferir SQS)
        # SQSTrigger:
        #   Type: SQS
        #   Properties:
        #     Queue: !GetAtt NotificationQueue.Arn
        #     BatchSize: 10

  # Tópico SNS (usado se escolher trigger SNS)
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: ImageUploadNotificationTopic

  # Fila SQS (usado se escolher trigger SQS - descomente se necessário)
  # NotificationQueue:
  #   Type: AWS::SQS::Queue
  #   Properties:
  #     QueueName: ImageUploadNotificationQueue

  # Identidade SES
  SenderIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: "juracifsouza02@gmail.com"  # Substituir por email real

Outputs:
  ApiEcommerce:
    Description: API Gateway endpoint URL for Prod stage for function
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  CreatePresignedUrlFunction:
    Description: Lambda Function ARN
    Value: !GetAtt CreatePresignedUrlFunction.Arn
  CreatePresignedUrlFunctionIamRole:
    Description: Implicit IAM Role created for function
    Value: !GetAtt CreatePresignedUrlFunction.Arn
  ApiUrlGetAllProducts:
    Description: "API Gateway endpoint URL GetAllProducts"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/products"
  ApiUrlGetProductById:
    Description: "API Gateway endpoint URL GetProductById"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/productid"
  TableName:
    Description: "DynamoDB table name"
    Value: !GetAtt BedrockMetadataImagesS3Table.Arn
  LambdaFunctionArn:
    Description: ARN da função Lambda
    Value: !GetAtt SendEmailNotificationFunction.Arn
  TopicArn:
    Description: ARN do tópico SNS
    Value: !Ref NotificationTopic